# -*- coding: utf-8 -*-
"""ETL- BATCH 18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1som9w7GmqkESn95kf8AXqe8VHPdxcd2l
"""

import requests
from bs4 import BeautifulSoup

def fetch_movies_from_rotten_tomatoes():
    print("üçÖ Fetching Latest Movies from Rotten Tomatoes...")
    url = "https://www.rottentomatoes.com/browse/movies_in_theaters"

    headers = {
        "User-Agent": "Mozilla/5.0"  # Mimic a real browser
    }

    try:
        response = requests.get(url, headers=headers)
        #response.raise_for_status()
        soup = BeautifulSoup(response.content, "html.parser")
        #print(soup)
        titles = []
        for i in soup.select('a.js-tile-link'):
            title = i.get("href").split("/")[-1].replace("-", " ").title()
            titles.append(title)

        print(f"‚úÖ Fetched {len(titles)} movies from Rotten Tomatoes!\n")
        return titles[:30]  # Limit to 30 latest movies

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error while scraping Rotten Tomatoes: {e}")
        return []

# Test the function
titles = fetch_movies_from_rotten_tomatoes()
print(titles)

import requests
from bs4 import BeautifulSoup
import json

# Rotten Tomatoes URL
url = "https://www.omdbapi.com/?t=Ponman&apikey=79554ea1"

response = requests.get(url)

if response.status_code == 200:
    movies = []  # Initialize movies list
    titles = ["Ponman"]  # Ensure titles list is defined

    for i in titles:
        url = f"https://www.omdbapi.com/?t={i}&apikey=79554ea1"

        try:
            response = requests.get(url)
            # response.raise_for_status()  # Uncomment if you want to catch errors

            data = response.json()

            if data.get("Response") == "True":
                movies.append(data)
            else:
                print(f"‚ùå Movie not found: {i}")

        except requests.exceptions.RequestException as e:
            print(f"‚ùå Request Error for {i}: {e}")

    print(f"‚úÖ Fetched {len(movies)} movies successfully!\n")
    print(json.dumps(movies, indent=4))  # Pretty-print JSON output
#return movies   - was giving intendation error for me., therefore i added the json file
# extract_movies(titles)

def transformation(movies):
    TransformMovies= []
    for i in movies:
        t=i.get("Title")
        y=i.get("Year")
        TransformMovies.append({"Title":t,"Year":y})
    print(TransformMovies)
transformation(movies)

